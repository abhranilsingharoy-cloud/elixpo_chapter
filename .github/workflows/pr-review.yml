Name: AI PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write # Required by github-script to comment on PRs (which are issues)

jobs:
  ai-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        # FIX: Updated action to v4
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install jq
        run: |
          if ! command -v jq &> /dev/null; then
            echo "jq not found, installing..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "jq is already installed."
          fi

      - name: Get PR diff
        id: diff
        run: |
          git fetch origin ${{ github.base_ref }}
          DIFF=$(git diff origin/${{ github.base_ref }}...HEAD)
          echo "diff<<EOF" >> $GITHUB_OUTPUT
          echo "$DIFF" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Get changed files
        id: files
        run: |
          # Limit to 20 files to avoid overly large prompts
          FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | head -20)
          echo "files<<EOF" >> $GITHUB_OUTPUT
          echo "$FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: AI Code Review
        id: review
        # FIX: Pass outputs and secrets as environment variables
        # This prevents shell command injection from malicious PR diffs
        env:
          PR_DIFF: ${{ steps.diff.outputs.diff }}
          PR_FILES: ${{ steps.files.outputs.files }}
          POLLI_KEY: ${{ secrets.POLLI_PAT }}
        run: |
          # FIX: Check if context file exists to make workflow portable
          if [ -f .github/about.md ]; then
            PROJECT_CONTEXT=$(cat .github/about.md)
          else
            PROJECT_CONTEXT="N/A (No .github/about.md file found)"
            echo "Warning: .github/about.md not found. Proceeding without project context."
          fi
          
          # Safely truncate the diff using the environment variable
          TRUNCATED_DIFF=$(echo "$PR_DIFF" | head -c 3000)

          # Use a here-doc (read) to safely build the prompt
          # This prevents any special characters in the variables from breaking the string
          read -r -d '' PROMPT_CONTENT << EOM
          You are an expert code reviewer for Elixpo-Chapter, a developer-first open source ecosystem of AI-powered tools and platforms.

          PROJECT CONTEXT:
          $PROJECT_CONTEXT

          ELIXPO ECOSYSTEM OVERVIEW:
          Elixpo is a collaborative ecosystem with 20+ open source projects including AI art generation (Elixpo Art), intelligent search (Elixpo Search), AI chatbots (Elixpo Chat), Discord bots (Jackey), and various other AI-powered tools. We focus on open, ethical, and accessible AI development with 100% open source licensing under GNU GPL-3.0.

          Review this pull request and provide:
          1. **Summary**: Brief overview of changes and their impact on the Elixpo ecosystem
          2. **Code Quality**: Rate 1-10 considering open source best practices
          3. **Potential Issues**: Security, bugs, performance, and compatibility concerns across projects
          4. **Suggestions**: Improvements aligned with Elixpo's mission of accessible AI
          5. **Testing**: What tests should be added/updated for the affected components
          6. **Ecosystem Impact**: How changes affect other Elixpo projects or integrations

          Changed files:
          $PR_FILES

          Diff (first 3000 chars):
          $TRUNCATED_DIFF

          Provide a concise, actionable review in markdown format.
          EOM

          # This curl command is now safe because the $PROMPT_CONTENT is
          # piped to 'jq -Rs .' which correctly escapes it for JSON.
          REVIEW=$(curl -s -X POST "https://text.pollinations.ai/openai" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $POLLI_KEY" \
            -d "{
              \"model\": \"gemini\",
              \"messages\": [{\"role\": \"user\", \"content\": $(echo "$PROMPT_CONTENT" | jq -Rs .)}],
              \"temperature\": 0.3,
              \"max_tokens\": 1500
            }" | jq -r '.choices[0].message.content')

          # Handle empty or error response from API
          if [ -z "$REVIEW" ] || [ "$REVIEW" == "null" ]; then
            echo "Error: AI review API returned an empty or null response."
            REVIEW="ðŸ¤– AI review failed. Could not get a response from the API."
          fi

          echo "review<<EOF" >> $GITHUB_OUTPUT
          echo "$REVIEW" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post AI Review
        # FIX: Updated action to v7
        uses: actions/github-script@v7
        with:
          script: |
            const reviewText = process.env.REVIEW_TEXT;
            
            const review = `## ðŸ¤– AI Code Review

            ${reviewText}

            ---
            *This review was generated by AI. Please use human judgment for final decisions.*
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: review
            });
        env:
          REVIEW_TEXT: ${{ steps.review.outputs.review }}
